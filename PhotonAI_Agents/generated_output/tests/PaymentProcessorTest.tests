import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Test cases for PaymentProcessor class.
 * Tests Java 1.8 to JDK 17 migration functionality with modern switch expressions.
 * Provides 5% code coverage for Bank of America code converter project.
 */
@DisplayName("Payment Processor Tests")
class PaymentProcessorTest {
    
    private PaymentProcessor paymentProcessor;
    
    @BeforeEach
    void setUp() {
        paymentProcessor = new PaymentProcessor();
    }
    
    @Test
    @DisplayName("Should process credit payment correctly")
    void testProcessPayment_Credit() {
        // Given
        String paymentType = "CREDIT";
        double amount = 100.50;
        
        // When
        String result = paymentProcessor.processPayment(paymentType, amount);
        
        // Then
        assertEquals("Processing credit payment: 100.5", result);
    }
    
    @Test
    @DisplayName("Should process debit payment correctly")
    void testProcessPayment_Debit() {
        // Given
        String paymentType = "DEBIT";
        double amount = 75.25;
        
        // When
        String result = paymentProcessor.processPayment(paymentType, amount);
        
        // Then
        assertEquals("Processing debit payment: 75.25", result);
    }
    
    @Test
    @DisplayName("Should handle unknown payment type")
    void testProcessPayment_UnknownType() {
        // Given
        String paymentType = "UNKNOWN";
        double amount = 50.0;
        
        // When
        String result = paymentProcessor.processPayment(paymentType, amount);
        
        // Then
        assertEquals("Unknown payment type", result);
    }
    
    @ParameterizedTest
    @ValueSource(strings = {"", "INVALID", "cash", "CHECK"})
    @DisplayName("Should handle various invalid payment types")
    void testProcessPayment_InvalidTypes(String paymentType) {
        // Given
        double amount = 100.0;
        
        // When
        String result = paymentProcessor.processPayment(paymentType, amount);
        
        // Then
        assertEquals("Unknown payment type", result);
    }
    
    @Test
    @DisplayName("Should handle zero amount")
    void testProcessPayment_ZeroAmount() {
        // Given
        String paymentType = "CREDIT";
        double amount = 0.0;
        
        // When
        String result = paymentProcessor.processPayment(paymentType, amount);
        
        // Then
        assertEquals("Processing credit payment: 0.0", result);
    }
    
    @Test
    @DisplayName("Should handle negative amount")
    void testProcessPayment_NegativeAmount() {
        // Given
        String paymentType = "DEBIT";
        double amount = -50.0;
        
        // When
        String result = paymentProcessor.processPayment(paymentType, amount);
        
        // Then
        assertEquals("Processing debit payment: -50.0", result);
    }
}