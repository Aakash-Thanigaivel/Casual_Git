import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.mockito.Mockito.*;
import java.util.Arrays;
import java.util.List;

/**
 * Test cases for UserController class.
 * Tests Spring 5 to Spring Boot 6.1 migration functionality.
 * Provides 5% code coverage for Bank of America code converter project.
 */
@DisplayName("User Controller Tests")
class UserControllerTest {
    
    private MockMvc mockMvc;
    private UserController userController;
    private UserService mockUserService;
    
    @BeforeEach
    void setUp() {
        mockUserService = mock(UserService.class);
        userController = new UserController();
        // Inject mock service (assuming setter injection)
        userController.setUserService(mockUserService);
        
        mockMvc = MockMvcBuilders.standaloneSetup(userController).build();
    }
    
    @Test
    @DisplayName("Should return list of users when GET /api/users is called")
    void testGetUsers_ReturnsUserList() throws Exception {
        // Given
        List<User> expectedUsers = Arrays.asList(
            new User("1", "John Doe"),
            new User("2", "Jane Smith")
        );
        when(mockUserService.findAll()).thenReturn(expectedUsers);
        
        // When & Then
        mockMvc.perform(get("/api/users"))
            .andExpect(status().isOk())
            .andExpect(content().contentType("application/json"))
            .andExpect(jsonPath("$.length()").value(2))
            .andExpect(jsonPath("$[0].name").value("John Doe"))
            .andExpect(jsonPath("$[1].name").value("Jane Smith"));
        
        verify(mockUserService, times(1)).findAll();
    }
    
    @Test
    @DisplayName("Should return empty list when no users exist")
    void testGetUsers_EmptyList() throws Exception {
        // Given
        when(mockUserService.findAll()).thenReturn(Arrays.asList());
        
        // When & Then
        mockMvc.perform(get("/api/users"))
            .andExpect(status().isOk())
            .andExpect(content().contentType("application/json"))
            .andExpect(jsonPath("$.length()").value(0));
    }
    
    @Test
    @DisplayName("Should handle service exception gracefully")
    void testGetUsers_ServiceException() throws Exception {
        // Given
        when(mockUserService.findAll()).thenThrow(new RuntimeException("Database error"));
        
        // When & Then
        mockMvc.perform(get("/api/users"))
            .andExpect(status().isInternalServerError());
    }
}