import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Test cases for BankAccount class.
 * Tests C++ to Java conversion functionality.
 * Provides 5% code coverage for Bank of America code converter project.
 * Note: This extends the existing BankAccountTest with additional coverage.
 */
@DisplayName("Bank Account Extended Tests")
class BankAccountExtendedTest {
    
    private BankAccount account;
    
    @BeforeEach
    void setUp() {
        account = new BankAccount("ACC-12345", 1000.0);
    }
    
    @Test
    @DisplayName("Should create account with correct initial values")
    void testAccountCreation() {
        // Then
        assertEquals("ACC-12345", account.getAccountNumber());
        assertEquals(1000.0, account.getBalance());
    }
    
    @Test
    @DisplayName("Should deposit positive amount correctly")
    void testDeposit_PositiveAmount() {
        // Given
        double depositAmount = 250.75;
        
        // When
        account.deposit(depositAmount);
        
        // Then
        assertEquals(1250.75, account.getBalance(), 0.01);
    }
    
    @Test
    @DisplayName("Should handle zero deposit")
    void testDeposit_ZeroAmount() {
        // Given
        double initialBalance = account.getBalance();
        
        // When
        account.deposit(0.0);
        
        // Then
        assertEquals(initialBalance, account.getBalance());
    }
    
    @ParameterizedTest
    @ValueSource(doubles = {10.5, 100.0, 999.99, 0.01})
    @DisplayName("Should handle various deposit amounts")
    void testDeposit_VariousAmounts(double amount) {
        // Given
        double initialBalance = account.getBalance();
        
        // When
        account.deposit(amount);
        
        // Then
        assertEquals(initialBalance + amount, account.getBalance(), 0.01);
    }
    
    @Test
    @DisplayName("Should handle large deposit amounts")
    void testDeposit_LargeAmount() {
        // Given
        double largeAmount = 1000000.0;
        
        // When
        account.deposit(largeAmount);
        
        // Then
        assertEquals(1001000.0, account.getBalance());
    }
    
    @Test
    @DisplayName("Should maintain account number immutability")
    void testAccountNumber_Immutability() {
        // Given
        String originalAccountNumber = account.getAccountNumber();
        
        // When - perform operations
        account.deposit(100.0);
        
        // Then
        assertEquals(originalAccountNumber, account.getAccountNumber());
    }
    
    @Test
    @DisplayName("Should handle multiple consecutive deposits")
    void testMultipleDeposits() {
        // When
        account.deposit(100.0);
        account.deposit(200.0);
        account.deposit(50.0);
        
        // Then
        assertEquals(1350.0, account.getBalance());
    }
}